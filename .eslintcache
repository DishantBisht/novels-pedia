[{"/home/dcns/Desktop/MyProjects/novel-pedia/src/index.js":"1","/home/dcns/Desktop/MyProjects/novel-pedia/src/components/MainComponent.js":"2","/home/dcns/Desktop/MyProjects/novel-pedia/src/components/FooterComponent.js":"3","/home/dcns/Desktop/MyProjects/novel-pedia/src/App.js":"4","/home/dcns/Desktop/MyProjects/novel-pedia/src/components/HeaderComponent.js":"5","/home/dcns/Desktop/MyProjects/novel-pedia/src/components/HomeComponent.js":"6","/home/dcns/Desktop/MyProjects/novel-pedia/src/reportWebVitals.js":"7","/home/dcns/Desktop/MyProjects/novel-pedia/src/redux/ActionTypes.js":"8","/home/dcns/Desktop/MyProjects/novel-pedia/src/redux/ActionCreators.js":"9","/home/dcns/Desktop/MyProjects/novel-pedia/src/redux/Form.js":"10","/home/dcns/Desktop/MyProjects/novel-pedia/src/redux/configureStore.js":"11","/home/dcns/Desktop/MyProjects/novel-pedia/src/components/ContactComponent.js":"12","/home/dcns/Desktop/MyProjects/novel-pedia/src/redux/books.js":"13","/home/dcns/Desktop/MyProjects/novel-pedia/src/components/BooksComponent.js":"14","/home/dcns/Desktop/MyProjects/novel-pedia/src/redux/comments.js":"15","/home/dcns/Desktop/MyProjects/novel-pedia/src/components/AboutComponent.js":"16","/home/dcns/Desktop/MyProjects/novel-pedia/src/components/BookDetails.js":"17","/home/dcns/Desktop/MyProjects/novel-pedia/src/shared/baseUrl.js":"18","/home/dcns/Desktop/MyProjects/novel-pedia/src/components/LoadingComponent.js":"19","/home/dcns/Desktop/MyProjects/novel-pedia/src/redux/auth.js":"20"},{"size":639,"mtime":1606154212745,"results":"21","hashOfConfig":"22"},{"size":3936,"mtime":1606305788105,"results":"23","hashOfConfig":"22"},{"size":2518,"mtime":1606152816523,"results":"24","hashOfConfig":"22"},{"size":583,"mtime":1606157724602,"results":"25","hashOfConfig":"22"},{"size":8611,"mtime":1606310162701,"results":"26","hashOfConfig":"22"},{"size":1147,"mtime":1606311416434,"results":"27","hashOfConfig":"22"},{"size":362,"mtime":1606136501606,"results":"28","hashOfConfig":"22"},{"size":545,"mtime":1606159591387,"results":"29","hashOfConfig":"22"},{"size":5912,"mtime":1606311950887,"results":"30","hashOfConfig":"22"},{"size":162,"mtime":1606150268688,"results":"31","hashOfConfig":"22"},{"size":676,"mtime":1606159472946,"results":"32","hashOfConfig":"22"},{"size":10336,"mtime":1606292866608,"results":"33","hashOfConfig":"22"},{"size":565,"mtime":1606151922804,"results":"34","hashOfConfig":"22"},{"size":1820,"mtime":1606312147234,"results":"35","hashOfConfig":"22"},{"size":522,"mtime":1606150268708,"results":"36","hashOfConfig":"22"},{"size":1928,"mtime":1606310750727,"results":"37","hashOfConfig":"22"},{"size":7051,"mtime":1606312511733,"results":"38","hashOfConfig":"22"},{"size":60,"mtime":1606316275229,"results":"39","hashOfConfig":"22"},{"size":247,"mtime":1606150736447,"results":"40","hashOfConfig":"22"},{"size":1421,"mtime":1606159529627,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1rgnd9a",{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"53"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"53"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},"/home/dcns/Desktop/MyProjects/novel-pedia/src/index.js",[],"/home/dcns/Desktop/MyProjects/novel-pedia/src/components/MainComponent.js",["91"],"import React, { Component } from 'react';\nimport Home from './HomeComponent';\nimport About from './AboutComponent';\nimport Books from './BooksComponent';\nimport Contact from './ContactComponent';\nimport BookDetail from './BookDetails';\nimport Header from './HeaderComponent';\nimport Footer from './FooterComponent';\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { postComment, postFeedback, fetchBooks, loginUser, logoutUser, postSignup } from '../redux/ActionCreators';\nimport { actions } from 'react-redux-form';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\n\nconst mapStateToProps = state => {\n    return {\n      books: state.books,\n      comments: state.comments,\n      promotions: state.promotions,\n      leaders: state.leaders,\n      favorites: state.favorites,\n      auth: state.auth\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  postComment: (bookId, by, rating, comment) => dispatch(postComment(bookId, by, rating, comment)),\n  fetchBooks: () => {dispatch(fetchBooks())},\n  resetFeedbackForm: () => { dispatch(actions.reset('feedback'))},\n  postFeedback: (feedback) => dispatch(postFeedback(feedback)),\n  loginUser: (creds) => dispatch(loginUser(creds)),\n  logoutUser: () => dispatch(logoutUser()),\n  postSignup: (creds) => dispatch(postSignup(creds))\n});\n\nclass Main extends Component {\n\n  componentDidMount() {\n    this.props.fetchBooks();\n  }\n\n  render() {\n\n    const HomePage = () => {\n      return(\n        <Home book={this.props.books.books.filter((book) => book.featured)[0]}\n          booksLoading={this.props.books.isLoading}\n          booksErrMess={this.props.books.errMess}\n        />\n      );\n    }\n\n    const BookWithId = ({match}) => {\n      return(\n        this.props.auth.isAuthenticated\n        ?\n        <BookDetail book={this.props.books.books.filter((book) => book._id === match.params.bookId)[0]}\n          isLoading={this.props.books.isLoading}\n          errMess={this.props.books.errMess}\n          commentsErrMess={this.props.comments.errMess}\n          postComment={this.props.postComment}\n          auth={this.props.auth}\n          />\n        :\n        <BookDetail book={this.props.books.books.filter((book) => book._id === match.params.bookId)[0]}\n          isLoading={this.props.books.isLoading}\n          errMess={this.props.books.errMess}\n          commentsErrMess={this.props.comments.errMess}\n          postComment={this.props.postComment}\n          auth={this.props.auth}\n          />\n      );\n    }\n\n    const PrivateRoute = ({ component: Component, ...rest }) => (\n      <Route {...rest} render={(props) => (\n        this.props.auth.isAuthenticated\n          ? <Component {...props} />\n          : <Redirect to={{\n              pathname: '/home',\n              state: { from: props.location }\n            }} />\n      )} />\n    );\n\n    return (\n      <div>\n        <Header auth={this.props.auth} \n          loginUser={this.props.loginUser} \n          logoutUser={this.props.logoutUser}\n          postSignup={this.props.postSignup} \n          />   \n        <TransitionGroup>\n          <CSSTransition key={this.props.location.key} classNames=\"page\" timeout={300}>\n            <Switch>\n              <Route path=\"/home\" component={HomePage} />\n              <Route exact path='/aboutus' component={() => <About />} />\n              <Route exact path=\"/books\" component={() => <Books books={this.props.books} />} />\n              <Route path=\"/books/:bookId\" component={BookWithId} />\n              <Route exact path=\"/contactus\" component={() => <Contact resetFeedbackForm={this.props.resetFeedbackForm} postFeedback={this.props.postFeedback} />} />\n              <Redirect to=\"/home\" />\n            </Switch>\n          </CSSTransition>\n        </TransitionGroup>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));",["92","93"],"/home/dcns/Desktop/MyProjects/novel-pedia/src/components/FooterComponent.js",[],["94","95"],"/home/dcns/Desktop/MyProjects/novel-pedia/src/App.js",[],["96","97"],"/home/dcns/Desktop/MyProjects/novel-pedia/src/components/HeaderComponent.js",[],"/home/dcns/Desktop/MyProjects/novel-pedia/src/components/HomeComponent.js",[],"/home/dcns/Desktop/MyProjects/novel-pedia/src/reportWebVitals.js",[],["98","99"],"/home/dcns/Desktop/MyProjects/novel-pedia/src/redux/ActionTypes.js",[],"/home/dcns/Desktop/MyProjects/novel-pedia/src/redux/ActionCreators.js",["100"],"import { CardImgOverlay } from 'reactstrap';\nimport { baseUrl } from '../shared/baseUrl';\nimport * as ActionTypes from './ActionTypes';\n\nexport const fetchBooks = () => (dispatch) => {\n\n    dispatch(booksLoading(true));\n\n    return fetch(baseUrl + 'books')\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n      })\n    .then(response => response.json())\n    .then(books => dispatch(addBooks(books)))\n    .catch(error => dispatch(booksFailed(error.message)));\n}\n\nexport const booksLoading = () => ({\n    type: ActionTypes.BOOKS_LOADING\n});\n\nexport const booksFailed = (errmess) => ({\n    type: ActionTypes.BOOKS_FAILED,\n    payload: errmess\n});\n\nexport const addBooks = (books) => ({\n    type: ActionTypes.ADD_BOOKS,\n    payload: books\n});\n\nexport const commentsFailed = (errmess) => ({\n    type: ActionTypes.COMMENTS_FAILED,\n    payload: errmess\n});\n\nexport const addComments = (comments) => ({\n    type: ActionTypes.ADD_COMMENTS,\n    payload: comments\n});\n\nexport const postComment = (bookId, by, rating, comment) => (dispatch) => {\n    const newComment = {\n        rating: rating,\n        by: by,\n        comment: comment\n    };\n\n    const bearer = 'Bearer ' + localStorage.getItem('token');\n    console.log(bearer);\n    return fetch(baseUrl + \"books/\" + bookId + '/comments', {\n        method: \"POST\",\n        body: JSON.stringify(newComment),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': bearer\n      }\n    })\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            throw error;\n      })\n    .then(response => response.json())\n    .then(response => dispatch(addComment(response)))\n    .catch(error =>  { console.log('post comments', error.message); alert('Your comment could not be posted\\n '+error.message); });\n};\n\nexport const addComment = (bookId, rating, author, comment) => ({\n    type: ActionTypes.ADD_COMMENT,\n    payload: comment\n});\n\nexport const postFeedback = (feedback) => (dispatch) => {\n\n  const bearer = 'Bearer ' + localStorage.getItem('token');\n  return fetch(baseUrl + \"feedback\", {\n    method: \"POST\",\n    body: JSON.stringify(feedback),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      'Authorization': bearer\n    },\n    credentials: \"same-origin\"\n  })\n    .then(\n      response => {\n   \n     if (response.ok) {\n          return response;\n        } else {\n          var error = new Error(\n            \"Error \" + response.status + \": \" + response.statusText\n          );\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n        throw error;\n      }\n    )\n    .then(response => response.json())\n    .then(response =>\n      alert(\"Thank you for your feedback!\" + JSON.stringify(response))\n    )\n    .catch(error => {\n      console.log(\"post feedbacks\", error.message);\n      alert(\"Your feedback could not be posted \\n Please Login first \\n Error: \" + error.message);\n    });\n};\n\nexport const requestLogin = (creds) => {\n  return {\n      type: ActionTypes.LOGIN_REQUEST,\n      creds\n  }\n}\n\nexport const receiveLogin = (response) => {\n  return {\n      type: ActionTypes.LOGIN_SUCCESS,\n      token: response.token\n  }\n}\n\nexport const loginError = (message) => {\n  return {\n      type: ActionTypes.LOGIN_FAILURE,\n      message\n  }\n}\n\nexport const loginUser = (creds) => (dispatch) => {\n  dispatch(requestLogin(creds))\n\n  return fetch(baseUrl + 'users/login', {\n      method: 'POST',\n      headers: { \n          'Content-Type':'application/json' \n      },\n      body: JSON.stringify(creds)\n  })\n  .then(response => {\n      if (response.ok) {\n          return response;\n      } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n      }\n      },\n      error => {\n          throw error;\n      })\n  .then(response => response.json())\n  .then(response => {\n      if (response.success) {\n\n          localStorage.setItem('token', response.token);\n          localStorage.setItem('creds', JSON.stringify(creds));\n          dispatch(receiveLogin(response));\n      }\n      else {\n          var error = new Error('Error ' + response.status);\n          error.response = response;\n          throw error;\n      }\n  })\n  .catch(error => dispatch(loginError(error.message)))\n};\n\nexport const requestLogout = () => {\n  return {\n    type: ActionTypes.LOGOUT_REQUEST\n  }\n}\n\nexport const receiveLogout = () => {\n  return {\n    type: ActionTypes.LOGOUT_SUCCESS\n  }\n}\n\nexport const logoutUser = () => (dispatch) => {\n  dispatch(requestLogout())\n  localStorage.removeItem('token');\n  localStorage.removeItem('creds');\n  dispatch(receiveLogout())\n}\n\nexport const postSignup = (creds) => (dispatch) => {\n  \n  return fetch(baseUrl + 'users/signup' , {\n      method: \"POST\",\n      body: JSON.stringify(creds),\n      headers: {\n        'Content-Type': 'application/json'\n    },\n      credentials: \"same-origin\"\n  })\n  .then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        var error = new Error('Error ' + response.status + ': ' + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    },\n    error => {\n          throw error;\n    })\n  .then(response => response.json())\n  .catch(error =>  { console.log('post UserSignUp', error.message); alert('User not Added\\n '+error.message); });\n};","/home/dcns/Desktop/MyProjects/novel-pedia/src/redux/Form.js",[],"/home/dcns/Desktop/MyProjects/novel-pedia/src/redux/configureStore.js",[],"/home/dcns/Desktop/MyProjects/novel-pedia/src/components/ContactComponent.js",["101","102","103","104","105","106","107"],"/home/dcns/Desktop/MyProjects/novel-pedia/src/redux/books.js",[],"/home/dcns/Desktop/MyProjects/novel-pedia/src/components/BooksComponent.js",[],"/home/dcns/Desktop/MyProjects/novel-pedia/src/redux/comments.js",[],"/home/dcns/Desktop/MyProjects/novel-pedia/src/components/AboutComponent.js",["108","109","110"],"import React from 'react';\nimport { Breadcrumb, BreadcrumbItem, Card, CardBody, CardHeader, Media } from 'reactstrap';\nimport { Link } from 'react-router-dom';\n\n\nfunction About(props) {\n\n    const leaders = props.leaders;\n\n    return(\n        <div className=\"container\">\n            <div className=\"row\">\n                <Breadcrumb className=\"container\">\n                    <BreadcrumbItem><Link to=\"/home\">Home</Link></BreadcrumbItem>\n                    <BreadcrumbItem active>About Us</BreadcrumbItem>\n                </Breadcrumb>             \n            </div>\n            <div className=\"row row-content\">\n                <div className=\"col-12 col-md-12\">\n                    <h2>Hi there!</h2>\n                    <p>This website was designed for the sole purpose of showcasing my skills as a MERN stack Developer. \n                        Plaese Do read the guide on the home page to understand the aspects of this website.\n                        Have a nice day! \n                    </p>\n                    <p>Do read the random quote..\n                    </p>\n                </div>\n                <div className=\"col-12\">\n                    <Card>\n                        <CardBody className=\"bg-faded\">\n                            <blockquote className=\"blockquote\">\n                                <p className=\"mb-0\">It is a far, far better thing that I do, than I have ever done; it is a far, far better rest I go to than I have ever known.</p>\n                                <footer className=\"blockquote-footer\">Yogi Berra,\n                                <cite title=\"Source Title\">A Tale of Two Cities,\n                                Charles Dickens</cite>\n                                </footer>\n                            </blockquote>\n                        </CardBody>\n                    </Card>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default About;    ",["111","112"],"/home/dcns/Desktop/MyProjects/novel-pedia/src/components/BookDetails.js",["113","114","115"],"import React,{ Component } from 'react';\nimport { Card, CardImg, CardText, CardBody, Breadcrumb, BreadcrumbItem , Button, Col, Modal, ModalHeader, ModalBody, Label, Row } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport { Control, LocalForm, Errors } from 'react-redux-form';\nimport { FadeTransform, Fade, Stagger } from 'react-animation-components';\n\nconst required = (val) => val && val.length;\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\nconst minLength = (len) => (val) => val && (val.length >= len);\n\nclass CommentForm extends Component {\n\n  constructor(props){\n        super(props);\n        this.toggleModal=this.toggleModal.bind(this);\n        this.handleSubmit=this.handleSubmit.bind(this);\n        this.state = {\n            isModalOpen: false\n        };\n    }\n\n    toggleModal(){\n        this.setState({\n            isModalOpen: !this.state.isModalOpen\n        });\n    }\n\n    handleSubmit(values) {\n      this.toggleModal();\n      this.props.postComment(this.props.bookId, values.author, values.rating, values.comment);\n      alert(\"Please! Refresh The page\");\n    }\n\n  render(){\n    return(\n      <React.Fragment>\n        <Button onClick={this.toggleModal} outline className=\"offset-2 btn-info\"><span className=\"fa fa-lg fa-pencil\"></span> Submit Comment</Button>\n\n        <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\n          <ModalHeader toggle={this.toggleModal}>Submit Comment</ModalHeader>\n          <ModalBody>\n              <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\n                  <Label htmlFor=\"rating\">Rating</Label>\n                  <Row className=\"form-group\">\n                      <Col className=\"col-12\">\n                          <Control.select model=\".rating\" name=\"rating\" default=\"3\"\n                          className=\"custom-select col-md-12 from-control\">\n                              <option>1</option>\n                              <option>2</option>\n                              <option>3</option>\n                              <option>4</option>\n                              <option>5</option>\n                          </Control.select>\n                      </Col>\n                  </Row>\n                  <Label htmlFor=\"author\">Your name</Label>\n                  <Row className=\"form-group\">\n                      <Col md={12}>\n                          <Control.text model=\".author\" id=\"author\" name=\"author\" placeholder=\"Your Name\" \n                          className=\"form-control\"\n                          validators={{\n                              required, minLength: minLength(3), maxLength: maxLength(15)\n                          }}\n                          />\n                          <Errors \n                              className=\"text-danger\"\n                              model=\".author\"\n                              show=\"touched\"\n                              messages={{\n                                  required: 'Required',\n                                  minLength: 'Must be greater than 2 chracters',\n                                  maxLength: 'Must be 15 characters or less'\n                              }}\n                          />\n                      </Col>\n                  </Row>\n                  <Label htmlFor=\"comment\">Comment</Label>\n                  <Row className=\"form-group\">\n                      <Col>\n                          <Control.textarea model=\".comment\" id=\"comment\" name=\"comment\" \n                          rows=\"6\"  \n                          className=\"form-control\"/>\n                              \n                      </Col>\n                  </Row>\n                  <Row className=\"form-group\">\n                      <Col>\n                          <Button type=\"submit\" color=\"primary\">\n                              Submit\n                          </Button>\n                      </Col>\n                  </Row>\n              </LocalForm>\n          </ModalBody>\n      </Modal>\n    </React.Fragment>\n    );\n  }\n}\n\nfunction RenderBook({book}){\n\tif(book!=null){\n\t\treturn(\n\t\t\t<div className=\"col-12 col-sm-5 m-1\">\n        <FadeTransform in transformProps={{ exitTransform: 'scale(0.5) translateY(-50%)'}}>\n  \t\t\t\t<Card>\n  \t\t\t\t\t<CardImg top width=\"100%\" src={book.image} alt={book.name} />\n  \t\t\t\t\t<CardBody>\n                        <CardText>Category: {book.category}</CardText>\n  \t\t\t\t        <CardText>{book.description}</CardText>\n                        <CardText><em>{book.writer}</em></CardText>   \n            </CardBody>\n  \t\t\t\t</Card>\n        </FadeTransform>\n\t\t\t</div>\n\t\t);\t\n\t}\n\telse {\n        return (\n            <div></div>\n        );\n    }\n}\n\n  function RenderComments({auth, comments, postComment, bookId}) {\n  \tif(comments!=null){\n\n\t\treturn(\n\t\t\t<div className='col-12 col-md-5 m-1'>\n                <h4> Comments </h4>\n                <ul>\n                      <Stagger in>\n                        {comments.map((comment) => {\n                            return (\n                                <Fade key={comment._id} in>\n                                <li>\n                                    <p>{comment.comment}</p>\n                                    <p>{comment.rating} stars</p>\n                                    <p>-- {comment.by} , {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day:'2-digit'}).format(new Date(Date.parse(comment.updatedAt)))}</p>\n                                </li>\n                                </Fade>\n                            );\n                        })}\n                      </Stagger>\n                </ul>\n                <CommentForm auth={auth} bookId={bookId} postComment={postComment} />\n            </div>\n\t\t);\t\n\t}\n\telse {\n        return (\n            <div></div>\n        );\n    }\n}\n\nfunction Details(props) {\n    \n  if(props.book!=null){\n              return (\n                <React.Fragment>\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <Breadcrumb className=\"container\">\n                                <BreadcrumbItem><Link to=\"/home\">Home</Link></BreadcrumbItem>\n                                <BreadcrumbItem><Link to=\"/books\">Books</Link></BreadcrumbItem>\n                                <BreadcrumbItem active>{props.book.name}</BreadcrumbItem>\n                            </Breadcrumb>\n                            <div className=\"col-12\">\n                                <h3>{props.book.name}</h3>\n                                <hr />\n                            </div>                \n                        </div>\n                        <div className=\"row\">\n                            <RenderBook book={props.book} />\n                            <RenderComments auth={props.auth} comments={props.book.comments} postComment={props.postComment} bookId={props.book._id} />\n                        </div>\n                    </div>\n                </React.Fragment>\n            );  \n  }\n  else{\n    return(<div></div>);\n  }\n}\n       \t\n\n\n\nexport default Details;","/home/dcns/Desktop/MyProjects/novel-pedia/src/shared/baseUrl.js",[],"/home/dcns/Desktop/MyProjects/novel-pedia/src/components/LoadingComponent.js",[],"/home/dcns/Desktop/MyProjects/novel-pedia/src/redux/auth.js",[],{"ruleId":"116","severity":1,"message":"117","line":75,"column":11,"nodeType":"118","messageId":"119","endLine":75,"endColumn":23},{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"120","replacedBy":"124"},{"ruleId":"122","replacedBy":"125"},{"ruleId":"120","replacedBy":"126"},{"ruleId":"122","replacedBy":"127"},{"ruleId":"120","replacedBy":"128"},{"ruleId":"122","replacedBy":"129"},{"ruleId":"116","severity":1,"message":"130","line":1,"column":10,"nodeType":"118","messageId":"119","endLine":1,"endColumn":24},{"ruleId":"131","severity":1,"message":"132","line":65,"column":37,"nodeType":"133","endLine":71,"endColumn":44},{"ruleId":"131","severity":1,"message":"132","line":87,"column":37,"nodeType":"133","endLine":93,"endColumn":44},{"ruleId":"131","severity":1,"message":"132","line":109,"column":37,"nodeType":"133","endLine":115,"endColumn":44},{"ruleId":"131","severity":1,"message":"132","line":132,"column":37,"nodeType":"133","endLine":138,"endColumn":44},{"ruleId":"131","severity":1,"message":"134","line":154,"column":45,"nodeType":"133","endLine":156,"endColumn":52},{"ruleId":"131","severity":1,"message":"135","line":162,"column":37,"nodeType":"133","endLine":163,"endColumn":66},{"ruleId":"131","severity":1,"message":"136","line":172,"column":37,"nodeType":"133","endLine":174,"endColumn":68},{"ruleId":"116","severity":1,"message":"137","line":2,"column":54,"nodeType":"118","messageId":"119","endLine":2,"endColumn":64},{"ruleId":"116","severity":1,"message":"138","line":2,"column":66,"nodeType":"118","messageId":"119","endLine":2,"endColumn":71},{"ruleId":"116","severity":1,"message":"139","line":8,"column":11,"nodeType":"118","messageId":"119","endLine":8,"endColumn":18},{"ruleId":"120","replacedBy":"140"},{"ruleId":"122","replacedBy":"141"},{"ruleId":"131","severity":1,"message":"135","line":46,"column":27,"nodeType":"133","endLine":47,"endColumn":76},{"ruleId":"131","severity":1,"message":"132","line":59,"column":27,"nodeType":"133","endLine":64,"endColumn":29},{"ruleId":"131","severity":1,"message":"136","line":80,"column":27,"nodeType":"133","endLine":82,"endColumn":53},"no-unused-vars","'PrivateRoute' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["142"],"no-negated-in-lhs",["143"],["142"],["143"],["142"],["143"],["142"],["143"],"'CardImgOverlay' is defined but never used.","react/jsx-pascal-case","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","'CardHeader' is defined but never used.","'Media' is defined but never used.","'leaders' is assigned a value but never used.",["142"],["143"],"no-global-assign","no-unsafe-negation"]